/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Custom layer definitions
#define LT_0 0
#define LT_1 1
#define LT_2 2
#define LT_3 3
#define LT_4 4
#define LT_5 5
#define LT_6 6
#define LT_7 7


/ {

// Tap Dance
        behaviors {
            // single quote, colon, semicolon
            tdsqclsc: tap_dance_sqclsc {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_0";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp SQT>, <&kp COLON>, <&kp SEMI>;
            };
            // comma, double quote
            tdcmdq: tap_dance_cmdq {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_1";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp COMMA>, <&kp DQT>;
            };
            // period, dash
            tddtds: tap_dance_dtds {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_2";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp DOT>, <&kp MINUS>;
            };
            // forward slash, backslash
            tdfsbs: tap_dance_fsbs {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_3";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp FSLH>, <&kp BSLH>;
            };
            // underscore, tilde, backslash
            tdutbs: tap_dance_utbs {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_4";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp UNDER>, <&kp TILDE>, <&kp BSLH>;
            };
            // double-tap LSHIFT to turn on CAPS WORD
            tdcaps: td_caps_word {
                compatible = "zmk,behavior-tap-dance";
                label = "CAPDANCE";
                #binding-cells = <0>;
                tapping-term-ms = <100>;
                bindings = <&kp LSHFT>, <&caps_word>;
            };
        };

        combos {
            compatible = "zmk,combos";
            
            // OP+BACKSPACE = CTRL+BKSP
            opbksp_ctrlbksp {
                timeout-ms = <50>;
                key-positions = <9 10 11>;
                bindings = <&kp LC(BSPC)>;
            };
            // P+BACKSPACE = DEL
            pbksp_del {
                timeout-ms = <50>;
                key-positions = <10 11>;
                bindings = <&kp DEL>;
            };

            // QW = CTRL+W
            qw_ctrlw {
                timeout-ms = <50>;
                key-positions = <1 2>;
                bindings = <&kp LC(W)>;
            };
            // QE = ALT+F4
            qe_altf4 {
                timeout-ms = <50>;
                key-positions = <1 3>;
                bindings = <&kp LA(F4)>;
            };


            // DF = CTRL+TAB
            df_ctrltab {
                timeout-ms = <50>;
                key-positions = <15 16>;
                bindings = <&kp LC(TAB)>;
            };
            // DG = CTRL+SHIFT+TAB
            dg_ctrlshifttab {
                timeout-ms = <50>;
                key-positions = <15 17>;
                bindings = <&kp LC(LS(TAB))>;
            };

            // ZC = CTRL+DOT
            zc_ctrldot {
                timeout-ms = <50>;
                key-positions = <25 27>;
                bindings = <&kp LC(DOT)>;
            };

            // SHIFT+ZX = CTRL+Z
            shftzx_ctrlz {
                timeout-ms = <50>;
                key-positions = <24 25 26>;
                bindings = <&kp LC(Z)>;
            };

            // ZX = LEFTARROW
            zx_left {
                timeout-ms = <50>;
                key-positions = <25 26>;
                bindings = <&kp LEFT>;
            };
            // CV = RIGHTARROW
            cv_right {
                timeout-ms = <50>;
                key-positions = <27 28>;
                bindings = <&kp RIGHT>;
            };

            // SDF = UPARROW
            sdf_up {
                timeout-ms = <50>;
                key-positions = <14 15 16>;
                bindings = <&kp UP>;
            };
            // XCV = DOWNARROW
            xcv_down {
                timeout-ms = <50>;
                key-positions = <26 27 28>;
                bindings = <&kp DOWN>;
            };

            // WR = PGUP
            wr_pgup {
                timeout-ms = <50>;
                key-positions = <2 4>;
                bindings = <&kp PG_UP>;
            };
            // SF = PGDN
            sf_pgdn  {
                timeout-ms = <50>;
                key-positions = <14 16>;
                bindings = <&kp PG_DN>;
            };

            // ERT = HOME
            ert_home {
                timeout-ms = <50>;
                key-positions = <3 4 5>;
                bindings = <&kp HOME>;
            };
            // DFG = END
            dfg_end {
                timeout-ms = <50>;
                key-positions = <15 16 17>;
                bindings = <&kp END>;
            };


            // IOP = PLUS
            iop_plus {
                timeout-ms = <50>;
                key-positions = <8 9 10>;
                bindings = <&kp PLUS>;
            };
            // KL' = MINUS
            klsq_minus {
                timeout-ms = <50>;
                key-positions = <20 21 22>;
                bindings = <&kp MINUS>;
            };
            // ,./ = EQUALS
            cmdtfs_equal {
                timeout-ms = <50>;
                key-positions = <32 33 34>;
                bindings = <&kp EQUAL>;
            };


            // YU = {
            yu_lcb {
                timeout-ms = <50>;
                key-positions = <6 7>;
                bindings = <&kp LBRC>;
            };
            // IO = }
            io_rcb {
                timeout-ms = <50>;
                key-positions = <8 9>;
                bindings = <&kp RBRC>;
            };

            
            // HJ = [
            hj_lsb {
                timeout-ms = <50>;
                key-positions = <18 19>;
                bindings = <&kp LBKT>;
            };
            // KL = ]
            kl_rsb {
                timeout-ms = <50>;
                key-positions = <20 21>;
                bindings = <&kp RBKT>;
            };

            // NM = (
            nm_lpar {
                timeout-ms = <50>;
                key-positions = <30 31>;
                bindings = <&kp LPAR>;
            };
            // ,. = )
            ,._rpar {
                timeout-ms = <50>;
                key-positions = <32 33>;
                bindings = <&kp RPAR>;
            };
        };

        conditional_layers {
            compatible = "zmk,conditional-layers";

            // if activating NAVI and NUMS layers together, activate ADJS layer instead
            tri_layer {
                if-layers = <1 3>;
                then-layer = <4>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                LT_0 {
                        bindings = <
   &kp TAB           &kp Q       &kp W      &kp E      &kp R      &kp T                      &kp Y      &kp U       &kp I     &kp O            &kp P          &kp BSPC
   &mt LCTRL ESC     &kp A       &kp S      &kp D      &kp F      &kp G                      &kp H      &kp J       &kp K     &kp L            &tdsqclsc      &kp RET
   &tdcaps           &kp Z       &kp X      &kp C      &kp V      &kp B                      &kp N      &kp M       &tdcmdq   &kp DOT          &kp FSLH       &tdutbs
              &kp TAB &kp LALT &kp TAB   &kp SPACE &kp LGUI &kp TAB
                        >;
                };
                
                LT_1 {     
                              bindings = <
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
                                           &trans       &trans       &trans                  &trans       &trans       &trans
                              >;
                      };

                LT_2 {     
                              bindings = <
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
                                           &trans       &trans       &trans                  &trans       &trans       &trans
                              >;
                      };

                LT_3 {     
                              bindings = <
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
                                           &trans       &trans       &trans                  &trans       &trans       &trans
                              >;
                      };

                LT_4 {     
                              bindings = <
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
                                           &trans       &trans       &trans                  &trans       &trans       &trans
                              >;
                      };

                LT_5 {     
                              bindings = <
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
                                           &trans       &trans       &trans                  &trans       &trans       &trans
                              >;
                      };

                LT_6 {     
                              bindings = <
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
                                           &trans       &trans       &trans                  &trans       &trans       &trans
                              >;
                      };

                LT_7 {     
                              bindings = <
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
    &trans       &trans       &trans       &trans       &trans       &trans                  &trans       &trans       &trans       &trans       &trans       &trans
                                           &trans       &trans       &trans                  &trans       &trans       &trans
                              >;
                      };
        };
};
